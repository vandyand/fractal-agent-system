[
  {
    "id": "openai_json_schema_tab",
    "type": "tab",
    "label": "OpenAI JSON Schema Tool",
    "disabled": false,
    "info": "Node-RED flow for OpenAI API calls with JSON schema validation"
  },
  {
    "id": "openai_input",
    "type": "http in",
    "z": "openai_json_schema_tab",
    "name": "OpenAI Input",
    "url": "/api/openai/json-schema",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 100,
    "wires": [["input_validator"]]
  },
  {
    "id": "input_validator",
    "type": "function",
    "z": "openai_json_schema_tab",
    "name": "Input Validator",
    "func": "// Validate input data against schema\n\nconst input = msg.payload;\n\n// Required fields\nconst required = ['model', 'prompt', 'schema'];\nconst missing = required.filter(field => !input[field]);\n\nif (missing.length > 0) {\n    msg.payload = {\n        success: false,\n        error: `Missing required fields: ${missing.join(', ')}`,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\n// Validate model\nconst validModels = ['gpt-4.1-mini', 'gpt-4.1-nano', 'gpt-4', 'gpt-3.5-turbo'];\nif (!validModels.includes(input.model)) {\n    msg.payload = {\n        success: false,\n        error: `Invalid model: ${input.model}. Valid models: ${validModels.join(', ')}`,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\n// Validate schema is an object\nif (typeof input.schema !== 'object' || input.schema === null) {\n    msg.payload = {\n        success: false,\n        error: 'Schema must be a valid JSON object',\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\n// Set validated input\nmsg.validatedInput = {\n    model: input.model,\n    prompt: input.prompt,\n    schema: input.schema,\n    temperature: input.temperature || 0.7,\n    maxTokens: input.maxTokens || 1000,\n    taskType: input.taskType || 'simple_query'\n};\n\nmsg.payload = { success: true, message: 'Input validated' };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 100,
    "wires": [["openai_processor"]]
  },
  {
    "id": "openai_processor",
    "type": "function",
    "z": "openai_json_schema_tab",
    "name": "OpenAI Processor",
    "func": "// Process OpenAI API call with JSON schema\n\nconst input = msg.validatedInput;\nconst startTime = Date.now();\n\n// TODO: Implement actual OpenAI API call\n// For now, simulate the response\n\nconst simulatedResponse = {\n    success: true,\n    data: {\n        content: `Simulated response for: ${input.prompt.substring(0, 50)}...`,\n        model: input.model,\n        schema: input.schema,\n        temperature: input.temperature,\n        maxTokens: input.maxTokens\n    },\n    usage: {\n        promptTokens: Math.floor(input.prompt.length / 4),\n        completionTokens: Math.floor(Math.random() * 100) + 50,\n        totalTokens: Math.floor(input.prompt.length / 4) + Math.floor(Math.random() * 100) + 50\n    },\n    executionTime: Date.now() - startTime,\n    timestamp: new Date().toISOString()\n};\n\nmsg.payload = simulatedResponse;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 100,
    "wires": [["response_formatter"]]
  },
  {
    "id": "response_formatter",
    "type": "function",
    "z": "openai_json_schema_tab",
    "name": "Response Formatter",
    "func": "// Format the response\n\nconst response = msg.payload;\n\n// Add metadata\nresponse.metadata = {\n    toolId: 'openai_json_schema_flow',\n    version: '1.0.0',\n    flowExecutionId: `flow_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    nodeRedExecution: true\n};\n\n// Format for tool registry\nmsg.payload = {\n    success: response.success,\n    toolId: 'openai_json_schema',\n    toolName: 'OpenAI JSON Schema API',\n    executionId: response.metadata.flowExecutionId,\n    result: response.data,\n    usage: response.usage,\n    executionTime: response.executionTime,\n    timestamp: response.timestamp,\n    metadata: response.metadata\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 100,
    "wires": [["openai_output"]]
  },
  {
    "id": "openai_output",
    "type": "http response",
    "z": "openai_json_schema_tab",
    "name": "OpenAI Output",
    "statusCode": "200",
    "headers": {},
    "x": 950,
    "y": 100,
    "wires": []
  },
  {
    "id": "error_handler",
    "type": "catch",
    "z": "openai_json_schema_tab",
    "name": "Error Handler",
    "scope": null,
    "uncaught": false,
    "x": 550,
    "y": 200,
    "wires": [["error_formatter"]]
  },
  {
    "id": "error_formatter",
    "type": "function",
    "z": "openai_json_schema_tab",
    "name": "Error Formatter",
    "func": "// Format error response\n\nconst error = msg.error;\n\nmsg.payload = {\n    success: false,\n    toolId: 'openai_json_schema',\n    toolName: 'OpenAI JSON Schema API',\n    error: error.message || 'Unknown error occurred',\n    executionTime: 0,\n    timestamp: new Date().toISOString(),\n    metadata: {\n        toolId: 'openai_json_schema_flow',\n        version: '1.0.0',\n        flowExecutionId: `flow_error_${Date.now()}`,\n        nodeRedExecution: true,\n        errorType: error.type || 'unknown'\n    }\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 200,
    "wires": [["error_output"]]
  },
  {
    "id": "error_output",
    "type": "http response",
    "z": "openai_json_schema_tab",
    "name": "Error Output",
    "statusCode": "500",
    "headers": {},
    "x": 950,
    "y": 200,
    "wires": []
  },
  {
    "id": "flow_monitor",
    "type": "inject",
    "z": "openai_json_schema_tab",
    "name": "Flow Monitor",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "300",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"action\": \"health_check\"}",
    "payloadType": "json",
    "x": 150,
    "y": 300,
    "wires": [["health_checker"]]
  },
  {
    "id": "health_checker",
    "type": "function",
    "z": "openai_json_schema_tab",
    "name": "Health Checker",
    "func": "// Health check for the flow\n\nconst { action } = msg.payload;\n\nif (action === 'health_check') {\n    const health = {\n        flowId: 'openai_json_schema_flow',\n        status: 'healthy',\n        uptime: process.uptime(),\n        memory: process.memoryUsage(),\n        timestamp: new Date().toISOString()\n    };\n    \n    msg.payload = health;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 300,
    "wires": [["health_output"]]
  },
  {
    "id": "health_output",
    "type": "debug",
    "z": "openai_json_schema_tab",
    "name": "Health Output",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 300,
    "wires": []
  }
] 