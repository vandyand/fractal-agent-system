[
  {
    "id": "email_agent_team_tab",
    "type": "tab",
    "label": "Email Agent Team",
    "disabled": false,
    "info": "Multi-agent email processing team with specialized agents"
  },
  {
    "id": "email_router",
    "type": "http in",
    "z": "email_agent_team_tab",
    "name": "Email Router",
    "url": "/webhook/email",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 100,
    "wires": [["email_categorizer"]]
  },
  {
    "id": "email_categorizer",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Email Categorizer",
    "func": "// Categorize incoming emails and route to appropriate agents\nconst email = msg.payload.email;\nconst subject = email.subject.toLowerCase();\nconst body = email.body.toLowerCase();\nconst from = email.from.toLowerCase();\n\n// Determine email category and priority\nlet category = 'general';\nlet priority = 'low';\n\n// Support emails\nif (subject.includes('support') || subject.includes('help') || \n    subject.includes('issue') || subject.includes('problem') ||\n    subject.includes('broken') || subject.includes('fix')) {\n    category = 'support';\n}\n\n// Sales emails\nelse if (subject.includes('quote') || subject.includes('pricing') || \n         subject.includes('demo') || subject.includes('sales') ||\n         subject.includes('purchase') || subject.includes('buy')) {\n    category = 'sales';\n}\n\n// Technical emails\nelse if (subject.includes('technical') || subject.includes('bug') || \n         subject.includes('error') || subject.includes('api') ||\n         subject.includes('code') || subject.includes('development')) {\n    category = 'technical';\n}\n\n// Urgent emails\nif (subject.includes('urgent') || subject.includes('emergency') || \n    subject.includes('critical') || subject.includes('asap') ||\n    subject.includes('immediate')) {\n    priority = 'high';\n    if (category === 'general') category = 'urgent';\n}\n\n// Important emails\nelse if (subject.includes('important') || subject.includes('priority')) {\n    priority = 'medium';\n}\n\nmsg.payload = {\n    email: email,\n    category: category,\n    priority: priority,\n    messageId: msg.payload.messageId,\n    timestamp: msg.payload.timestamp,\n    agentType: msg.payload.agentType\n};\n\n// Add routing information\nmsg.routing = {\n    support: category === 'support',\n    sales: category === 'sales',\n    technical: category === 'technical',\n    urgent: category === 'urgent',\n    general: category === 'general'\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 100,
    "wires": [["agent_router"]]
  },
  {
    "id": "agent_router",
    "type": "switch",
    "z": "email_agent_team_tab",
    "name": "Route to Agent",
    "property": "routing.support",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": true,
        "vt": "bool"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 550,
    "y": 100,
    "wires": [["support_agent"]]
  },
  {
    "id": "support_agent",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Support Agent",
    "func": "// Support Agent - Handles customer support inquiries\nconst email = msg.payload.email;\nconst priority = msg.payload.priority;\n\n// Generate support response\nconst response = {\n    to: email.from,\n    subject: `Re: ${email.subject}`,\n    priority: priority,\n    agent: 'support_agent',\n    template: 'support_response',\n    variables: {\n        customerName: email.from.split('@')[0],\n        originalSubject: email.subject,\n        ticketId: `SUPPORT-${Date.now()}`,\n        priority: priority\n    }\n};\n\n// Add support-specific logic\nif (priority === 'high') {\n    response.escalate = true;\n    response.escalateTo = 'escalation_agent';\n}\n\nmsg.payload = response;\nmsg.notification = `ðŸ“§ Support Agent processed: ${email.subject} (${priority} priority)`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 60,
    "wires": [["response_generator"]]
  },
  {
    "id": "sales_agent",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Sales Agent",
    "func": "// Sales Agent - Handles sales inquiries and leads\nconst email = msg.payload.email;\nconst priority = msg.payload.priority;\n\n// Generate sales response\nconst response = {\n    to: email.from,\n    subject: `Re: ${email.subject}`,\n    priority: priority,\n    agent: 'sales_agent',\n    template: 'sales_response',\n    variables: {\n        customerName: email.from.split('@')[0],\n        originalSubject: email.subject,\n        leadId: `LEAD-${Date.now()}`,\n        priority: priority\n    }\n};\n\n// Add sales-specific logic\nif (email.subject.toLowerCase().includes('demo')) {\n    response.action = 'schedule_demo';\n    response.demoRequested = true;\n}\n\nif (email.subject.toLowerCase().includes('quote')) {\n    response.action = 'generate_quote';\n    response.quoteRequested = true;\n}\n\nmsg.payload = response;\nmsg.notification = `ðŸ’° Sales Agent processed: ${email.subject} (${priority} priority)`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 100,
    "wires": [["response_generator"]]
  },
  {
    "id": "technical_agent",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Technical Agent",
    "func": "// Technical Agent - Handles technical questions and bugs\nconst email = msg.payload.email;\nconst priority = msg.payload.priority;\n\n// Generate technical response\nconst response = {\n    to: email.from,\n    subject: `Re: ${email.subject}`,\n    priority: priority,\n    agent: 'technical_agent',\n    template: 'technical_response',\n    variables: {\n        customerName: email.from.split('@')[0],\n        originalSubject: email.subject,\n        ticketId: `TECH-${Date.now()}`,\n        priority: priority\n    }\n};\n\n// Add technical-specific logic\nif (email.subject.toLowerCase().includes('bug')) {\n    response.action = 'create_bug_report';\n    response.bugReport = true;\n}\n\nif (email.subject.toLowerCase().includes('api')) {\n    response.action = 'api_support';\n    response.apiQuestion = true;\n}\n\nmsg.payload = response;\nmsg.notification = `ðŸ”§ Technical Agent processed: ${email.subject} (${priority} priority)`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 140,
    "wires": [["response_generator"]]
  },
  {
    "id": "escalation_agent",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Escalation Agent",
    "func": "// Escalation Agent - Handles urgent and complex cases\nconst email = msg.payload.email;\nconst priority = msg.payload.priority;\n\n// Generate escalation response\nconst response = {\n    to: email.from,\n    subject: `Re: ${email.subject} - URGENT`,\n    priority: 'high',\n    agent: 'escalation_agent',\n    template: 'escalation_response',\n    variables: {\n        customerName: email.from.split('@')[0],\n        originalSubject: email.subject,\n        escalationId: `ESC-${Date.now()}`,\n        priority: 'high'\n    }\n};\n\n// Add escalation-specific logic\nresponse.urgent = true;\nresponse.humanReview = true;\nresponse.notifyTeam = true;\n\nmsg.payload = response;\nmsg.notification = `ðŸš¨ ESCALATION Agent processed: ${email.subject} (URGENT)`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 180,
    "wires": [["response_generator"]]
  },
  {
    "id": "general_agent",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "General Agent",
    "func": "// General Agent - Handles miscellaneous emails\nconst email = msg.payload.email;\nconst priority = msg.payload.priority;\n\n// Generate general response\nconst response = {\n    to: email.from,\n    subject: `Re: ${email.subject}`,\n    priority: priority,\n    agent: 'general_agent',\n    template: 'general_response',\n    variables: {\n        customerName: email.from.split('@')[0],\n        originalSubject: email.subject,\n        ticketId: `GEN-${Date.now()}`,\n        priority: priority\n    }\n};\n\nmsg.payload = response;\nmsg.notification = `ðŸ“§ General Agent processed: ${email.subject} (${priority} priority)`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 220,
    "wires": [["response_generator"]]
  },
  {
    "id": "response_generator",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Response Generator",
    "func": "// Generate email response using templates and AI\nconst response = msg.payload;\nconst template = response.template;\nconst variables = response.variables;\n\n// Email templates\nconst templates = {\n    support_response: {\n        subject: `Re: ${variables.originalSubject} - Support Ticket ${variables.ticketId}`,\n        text: `Dear ${variables.customerName},\\n\\nThank you for contacting our support team. We have received your inquiry regarding \"${variables.originalSubject}\".\\n\\nYour support ticket number is: ${variables.ticketId}\\nPriority: ${variables.priority}\\n\\nOur team is reviewing your request and will respond within 24 hours. For urgent matters, please call our support line.\\n\\nBest regards,\\nSupport Team\\nPragmaGen Systems`\n    },\n    sales_response: {\n        subject: `Re: ${variables.originalSubject} - Sales Inquiry ${variables.leadId}`,\n        text: `Dear ${variables.customerName},\\n\\nThank you for your interest in our services! We have received your sales inquiry regarding \"${variables.originalSubject}\".\\n\\nYour lead ID is: ${variables.leadId}\\nPriority: ${variables.priority}\\n\\nOur sales team will contact you within 2 business hours to discuss your requirements and provide a customized solution.\\n\\nBest regards,\\nSales Team\\nPragmaGen Systems`\n    },\n    technical_response: {\n        subject: `Re: ${variables.originalSubject} - Technical Support ${variables.ticketId}`,\n        text: `Dear ${variables.customerName},\\n\\nThank you for contacting our technical support team. We have received your technical inquiry regarding \"${variables.originalSubject}\".\\n\\nYour technical ticket number is: ${variables.ticketId}\\nPriority: ${variables.priority}\\n\\nOur technical team is reviewing your request and will provide a detailed response within 4 hours.\\n\\nBest regards,\\nTechnical Support Team\\nPragmaGen Systems`\n    },\n    escalation_response: {\n        subject: `Re: ${variables.originalSubject} - URGENT - Escalation ${variables.escalationId}`,\n        text: `Dear ${variables.customerName},\\n\\nWe have received your urgent inquiry regarding \"${variables.originalSubject}\". This has been escalated to our senior team for immediate attention.\\n\\nYour escalation ID is: ${variables.escalationId}\\nPriority: URGENT\\n\\nA senior team member will contact you within 1 hour to address your urgent matter.\\n\\nBest regards,\\nSenior Support Team\\nPragmaGen Systems`\n    },\n    general_response: {\n        subject: `Re: ${variables.originalSubject} - Inquiry ${variables.ticketId}`,\n        text: `Dear ${variables.customerName},\\n\\nThank you for contacting us regarding \"${variables.originalSubject}\". We have received your inquiry and are processing it.\\n\\nYour inquiry ID is: ${variables.ticketId}\\nPriority: ${variables.priority}\\n\\nWe will respond to your inquiry within 24 hours.\\n\\nBest regards,\\nCustomer Service Team\\nPragmaGen Systems`\n    }\n};\n\nconst selectedTemplate = templates[template];\n\nmsg.payload = {\n    to: response.to,\n    subject: selectedTemplate.subject,\n    text: selectedTemplate.text,\n    html: selectedTemplate.text.replace(/\\n/g, '<br>'),\n    agent: response.agent,\n    priority: response.priority,\n    template: template,\n    variables: variables,\n    urgent: response.urgent || false,\n    escalate: response.escalate || false\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 950,
    "y": 140,
    "wires": [["email_sender"]]
  },
  {
    "id": "email_sender",
    "type": "http request",
    "z": "email_agent_team_tab",
    "name": "Send Email",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/webhook/email",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 1150,
    "y": 140,
    "wires": [["email_logger"]]
  },
  {
    "id": "email_logger",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Log Email Response",
    "func": "// Log email response and update statistics\nconst response = msg.payload;\nconst emailData = msg.payload;\n\n// Create log entry\nconst logEntry = {\n    timestamp: new Date().toISOString(),\n    agent: emailData.agent,\n    to: emailData.to,\n    subject: emailData.subject,\n    priority: emailData.priority,\n    template: emailData.template,\n    urgent: emailData.urgent,\n    escalate: emailData.escalate\n};\n\n// Save to file\nconst fs = require('fs');\nconst logFile = 'email_responses.log';\nfs.appendFileSync(logFile, JSON.stringify(logEntry, null, 2) + '\\n---\\n');\n\nmsg.payload = {\n    success: true,\n    logEntry: logEntry,\n    notification: `âœ… Email sent by ${emailData.agent}: ${emailData.subject}`\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1350,
    "y": 140,
    "wires": [["notification_output"]]
  },
  {
    "id": "notification_output",
    "type": "debug",
    "z": "email_agent_team_tab",
    "name": "Email Notifications",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "notification",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1550,
    "y": 140,
    "wires": []
  }
]
