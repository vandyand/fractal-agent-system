[
  {
    "id": "health_check_tab",
    "type": "tab",
    "label": "System Health",
    "disabled": false,
    "info": "System monitoring and health checks"
  },
  {
    "id": "email_agent_team_tab",
    "type": "tab",
    "label": "Email Agent Team",
    "disabled": false,
    "info": "Multi-agent email processing team with specialized agents"
  },
  {
    "id": "health_check",
    "type": "http in",
    "z": "health_check_tab",
    "name": "Health Check",
    "url": "/health",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 100,
    "wires": [["health_request"]]
  },
  {
    "id": "health_request",
    "type": "http request",
    "z": "health_check_tab",
    "name": "Call Email Processor Health",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/health",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 350,
    "y": 100,
    "wires": [["health_response"]]
  },
  {
    "id": "health_response",
    "type": "http response",
    "z": "health_check_tab",
    "name": "Health Response",
    "statusCode": "200",
    "headers": {},
    "x": 550,
    "y": 100,
    "wires": []
  },
  {
    "id": "email_router",
    "type": "http in",
    "z": "email_agent_team_tab",
    "name": "Email Router",
    "url": "/webhook/email",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 100,
    "wires": [["email_categorizer"]]
  },
  {
    "id": "email_categorizer",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Email Categorizer",
    "func": "// Categorize incoming emails and route to appropriate agents\nconst email = msg.payload.email || msg.payload;\nconst subject = (email.subject || '').toLowerCase();\nconst body = (email.body || '').toLowerCase();\nconst from = (email.from || '').toLowerCase();\n\n// Determine email category and priority\nlet category = 'general';\nlet priority = 'low';\n\n// Support emails\nif (subject.includes('support') || subject.includes('help') || \n    subject.includes('issue') || subject.includes('problem') ||\n    subject.includes('broken') || subject.includes('fix')) {\n    category = 'support';\n}\n\n// Sales emails\nelse if (subject.includes('quote') || subject.includes('pricing') || \n         subject.includes('demo') || subject.includes('sales') ||\n         subject.includes('purchase') || subject.includes('buy')) {\n    category = 'sales';\n}\n\n// Technical emails\nelse if (subject.includes('technical') || subject.includes('bug') || \n         subject.includes('error') || subject.includes('api') ||\n         subject.includes('code') || subject.includes('development')) {\n    category = 'technical';\n}\n\n// Urgent emails\nif (subject.includes('urgent') || subject.includes('emergency') || \n    subject.includes('critical') || subject.includes('asap') ||\n    subject.includes('immediate')) {\n    priority = 'high';\n    if (category === 'general') category = 'urgent';\n}\n\n// Important emails\nelse if (subject.includes('important') || subject.includes('priority')) {\n    priority = 'medium';\n}\n\nmsg.payload = {\n    email: email,\n    category: category,\n    priority: priority,\n    messageId: msg.payload.messageId || `MSG-${Date.now()}`,\n    timestamp: msg.payload.timestamp || new Date().toISOString(),\n    agentType: msg.payload.agentType || 'auto'\n};\n\n// Add routing information\nmsg.routing = {\n    support: category === 'support',\n    sales: category === 'sales',\n    technical: category === 'technical',\n    urgent: category === 'urgent',\n    general: category === 'general'\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 100,
    "wires": [["agent_router"]]
  },
  {
    "id": "agent_router",
    "type": "switch",
    "z": "email_agent_team_tab",
    "name": "Route to Agent",
    "property": "routing.support",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": true,
        "vt": "bool"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 550,
    "y": 100,
    "wires": [["support_agent"]]
  },
  {
    "id": "support_agent",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Support Agent",
    "func": "// Support Agent - Handles customer support inquiries\nconst email = msg.payload.email;\nconst priority = msg.payload.priority;\n\n// Generate support response\nconst response = {\n    to: email.from,\n    subject: `Re: ${email.subject}`,\n    priority: priority,\n    agent: 'support_agent',\n    template: 'support_response',\n    variables: {\n        customerName: email.from.split('@')[0],\n        originalSubject: email.subject,\n        ticketId: `SUPPORT-${Date.now()}`,\n        priority: priority\n    }\n};\n\n// Add support-specific logic\nif (priority === 'high') {\n    response.escalate = true;\n    response.escalateTo = 'escalation_agent';\n}\n\nmsg.payload = response;\nmsg.notification = `ðŸ“§ Support Agent processed: ${email.subject} (${priority} priority)`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 60,
    "wires": [["response_generator"]]
  },
  {
    "id": "response_generator",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Response Generator",
    "func": "// Generate email response using templates and AI\nconst response = msg.payload;\nconst template = response.template;\nconst variables = response.variables;\n\n// Email templates\nconst templates = {\n    support_response: {\n        subject: `Re: ${variables.originalSubject} - Support Ticket ${variables.ticketId}`,\n        text: `Dear ${variables.customerName},\\n\\nThank you for contacting our support team. We have received your inquiry regarding \"${variables.originalSubject}\".\\n\\nYour support ticket number is: ${variables.ticketId}\\nPriority: ${variables.priority}\\n\\nOur team is reviewing your request and will respond within 24 hours. For urgent matters, please call our support line.\\n\\nBest regards,\\nSupport Team\\nPragmaGen Systems`\n    }\n};\n\nconst selectedTemplate = templates[template];\n\nmsg.payload = {\n    to: response.to,\n    subject: selectedTemplate.subject,\n    text: selectedTemplate.text,\n    html: selectedTemplate.text.replace(/\\n/g, '<br>'),\n    agent: response.agent,\n    priority: response.priority,\n    template: template,\n    variables: variables,\n    urgent: response.urgent || false,\n    escalate: response.escalate || false\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 950,
    "y": 140,
    "wires": [["email_logger"]]
  },
  {
    "id": "email_logger",
    "type": "function",
    "z": "email_agent_team_tab",
    "name": "Log Email Response",
    "func": "// Log email response and update statistics\nconst emailData = msg.payload;\n\n// Create log entry\nconst logEntry = {\n    timestamp: new Date().toISOString(),\n    agent: emailData.agent,\n    to: emailData.to,\n    subject: emailData.subject,\n    priority: emailData.priority,\n    template: emailData.template,\n    urgent: emailData.urgent,\n    escalate: emailData.escalate\n};\n\n// Save to file\nconst fs = require('fs');\nconst logFile = 'email_responses.log';\nfs.appendFileSync(logFile, JSON.stringify(logEntry, null, 2) + '\\n---\\n');\n\nmsg.payload = {\n    success: true,\n    logEntry: logEntry,\n    notification: `âœ… Email processed by ${emailData.agent}: ${emailData.subject}`\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1150,
    "y": 140,
    "wires": [["notification_output"]]
  },
  {
    "id": "notification_output",
    "type": "debug",
    "z": "email_agent_team_tab",
    "name": "Email Notifications",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "notification",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1350,
    "y": 140,
    "wires": []
  }
] 