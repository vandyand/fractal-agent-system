[
  {
    "id": "email_triggered_tab",
    "type": "tab",
    "label": "Email Triggered Actions",
    "disabled": false,
    "info": "Automatically processes incoming emails and triggers actions"
  },
  {
    "id": "email_in_node",
    "type": "email in",
    "z": "email_triggered_tab",
    "name": "Gmail Receiver",
    "server": "imap.gmail.com",
    "port": "993",
    "tls": true,
    "tlsOptions": {},
    "autotls": "never",
    "username": "pragmagen@gmail.com",
    "password": "",
    "passwordType": "str",
    "keepalive": "keepalive",
    "poll": 30,
    "pollInterval": 30,
    "pollIntervalUnits": "seconds",
    "filter": "is:unread -label:\"Processed by Node-RED\"",
    "markSeen": false,
    "markRead": false,
    "delete": false,
    "deleteAfter": 0,
    "x": 150,
    "y": 100,
    "wires": [["email_filter", "email_logger"]]
  },
  {
    "id": "email_filter",
    "type": "switch",
    "z": "email_triggered_tab",
    "name": "Filter Emails",
    "property": "payload.from",
    "propertyType": "msg",
    "rules": [
      {
        "t": "regex",
        "v": ".*@gmail\\.com",
        "vt": "str"
      },
      {
        "t": "regex",
        "v": ".*@amazon\\.com",
        "vt": "str"
      },
      {
        "t": "regex",
        "v": ".*@google\\.com",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 3,
    "x": 350,
    "y": 100,
    "wires": [["gmail_processor"], ["amazon_processor"], ["google_processor"]]
  },
  {
    "id": "email_logger",
    "type": "file",
    "z": "email_triggered_tab",
    "name": "Log All Emails",
    "filename": "received_emails.log",
    "appendNewline": true,
    "createDir": false,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 350,
    "y": 200,
    "wires": []
  },
  {
    "id": "gmail_processor",
    "type": "function",
    "z": "email_triggered_tab",
    "name": "Process Gmail",
    "func": "// Process Gmail emails\nconst email = msg.payload;\n\nmsg.payload = {\n    receivedAt: new Date().toISOString(),\n    source: 'Gmail',\n    from: email.from,\n    subject: email.subject,\n    body: email.text || email.html,\n    priority: 'high',\n    action: 'process_gmail'\n};\n\n// Add notification\nmsg.notification = `📧 New Gmail from ${email.from}: ${email.subject}`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 60,
    "wires": [["action_router"]]
  },
  {
    "id": "amazon_processor",
    "type": "function",
    "z": "email_triggered_tab",
    "name": "Process Amazon",
    "func": "// Process Amazon emails\nconst email = msg.payload;\n\nmsg.payload = {\n    receivedAt: new Date().toISOString(),\n    source: 'Amazon',\n    from: email.from,\n    subject: email.subject,\n    body: email.text || email.html,\n    priority: 'medium',\n    action: 'process_amazon_order'\n};\n\n// Add notification\nmsg.notification = `🛒 New Amazon email: ${email.subject}`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 100,
    "wires": [["action_router"]]
  },
  {
    "id": "google_processor",
    "type": "function",
    "z": "email_triggered_tab",
    "name": "Process Google",
    "func": "// Process Google emails\nconst email = msg.payload;\n\nmsg.payload = {\n    receivedAt: new Date().toISOString(),\n    source: 'Google',\n    from: email.from,\n    subject: email.subject,\n    body: email.text || email.html,\n    priority: 'high',\n    action: 'process_google_alert'\n};\n\n// Add notification\nmsg.notification = `🔐 New Google alert: ${email.subject}`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 550,
    "y": 140,
    "wires": [["action_router"]]
  },
  {
    "id": "action_router",
    "type": "switch",
    "z": "email_triggered_tab",
    "name": "Route Actions",
    "property": "payload.action",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "process_gmail",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "process_amazon_order",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "process_google_alert",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 3,
    "x": 750,
    "y": 100,
    "wires": [["gmail_action"], ["amazon_action"], ["google_action"]]
  },
  {
    "id": "gmail_action",
    "type": "exec",
    "z": "email_triggered_tab",
    "command": "echo 'Gmail email received: ${payload.subject}' >> gmail_actions.log",
    "addpay": false,
    "append": "",
    "useSpawn": "false",
    "timer": "",
    "winHide": false,
    "oldrc": false,
    "name": "Gmail Action",
    "x": 950,
    "y": 60,
    "wires": [["add_processed_label"]]
  },
  {
    "id": "amazon_action",
    "type": "exec",
    "z": "email_triggered_tab",
    "command": "echo 'Amazon order email: ${payload.subject}' >> amazon_orders.log",
    "addpay": false,
    "append": "",
    "useSpawn": "false",
    "timer": "",
    "winHide": false,
    "oldrc": false,
    "name": "Amazon Action",
    "x": 950,
    "y": 100,
    "wires": [["add_processed_label"]]
  },
  {
    "id": "google_action",
    "type": "exec",
    "z": "email_triggered_tab",
    "command": "echo 'Google security alert: ${payload.subject}' >> security_alerts.log",
    "addpay": false,
    "append": "",
    "useSpawn": "false",
    "timer": "",
    "winHide": false,
    "oldrc": false,
    "name": "Google Action",
    "x": 950,
    "y": 140,
    "wires": [["add_processed_label"]]
  },
  {
    "id": "add_processed_label",
    "type": "function",
    "z": "email_triggered_tab",
    "name": "Add Processed Label",
    "func": "// Add a custom label to mark emails as processed\nconst email = msg.payload;\n\n// Create a label name for processed emails\nconst processedLabel = 'Processed by Node-RED';\n\n// Store the original email data for labeling\nmsg.emailData = {\n    messageId: email.messageId || email.id,\n    label: processedLabel\n};\n\n// Add notification about labeling\nmsg.notification = `${msg.notification} (Adding label: ${processedLabel})`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1150,
    "y": 60,
    "wires": [["notification_output"]]
  },
  {
    "id": "notification_output",
    "type": "debug",
    "z": "email_triggered_tab",
    "name": "Email Notifications",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "notification",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1350,
    "y": 60,
    "wires": []
  }
]
