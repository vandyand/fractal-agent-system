[
  {
    "id": "resource_registry_tab",
    "type": "tab",
    "label": "Resource Registry",
    "disabled": false,
    "info": "Central resource management system for agent collaboration"
  },
  {
    "id": "resource_api",
    "type": "http in",
    "z": "resource_registry_tab",
    "name": "Resource API",
    "url": "/api/resources/:action",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 150,
    "y": 100,
    "wires": [["resource_processor"]]
  },
  {
    "id": "resource_processor",
    "type": "function",
    "z": "resource_registry_tab",
    "name": "Resource Processor",
    "func": "// Process resource API requests\n\nconst action = msg.req.params.action;\nconst data = msg.payload;\n\n// Import the ResourceRegistry\nconst { ResourceRegistry } = require('./src/services/resource_registry');\n\n// Initialize registry if not exists\nif (!global.resourceRegistry) {\n    global.resourceRegistry = new ResourceRegistry();\n}\n\n// Available resource actions\nconst actions = {\n    'register': () => global.resourceRegistry.registerResource(data),\n    'get': () => global.resourceRegistry.getResource(data.resourceId, data.agentId),\n    'update': () => global.resourceRegistry.updateResource(data.resourceId, data.updates, data.agentId),\n    'delete': () => global.resourceRegistry.deleteResource(data.resourceId, data.agentId),\n    'search': () => global.resourceRegistry.searchResources(data.query, data.filters),\n    'share': () => global.resourceRegistry.shareResource(data.resourceId, data.targetAgentId, data.accessLevel),\n    'lock': () => global.resourceRegistry.lockResource(data.resourceId, data.agentId, data.timeout),\n    'unlock': () => global.resourceRegistry.unlockResource(data.resourceId, data.agentId),\n    'stats': () => global.resourceRegistry.getStats()\n};\n\nif (actions[action]) {\n    try {\n        const result = await actions[action]();\n        msg.payload = {\n            success: true,\n            action: action,\n            data: result,\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        msg.payload = {\n            success: false,\n            action: action,\n            error: error.message,\n            timestamp: new Date().toISOString()\n        };\n    }\n} else {\n    msg.payload = {\n        success: false,\n        action: action,\n        error: 'Unknown action',\n        timestamp: new Date().toISOString()\n    };\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 100,
    "wires": [["resource_response"]]
  },
  {
    "id": "resource_response",
    "type": "http response",
    "z": "resource_registry_tab",
    "name": "Resource Response",
    "statusCode": "200",
    "headers": {},
    "x": 650,
    "y": 100,
    "wires": []
  },
  {
    "id": "resource_monitor",
    "type": "inject",
    "z": "resource_registry_tab",
    "name": "Resource Monitor",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "120",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"action\": \"stats\"}",
    "payloadType": "json",
    "x": 150,
    "y": 200,
    "wires": [["stats_processor"]]
  },
  {
    "id": "stats_processor",
    "type": "function",
    "z": "resource_registry_tab",
    "name": "Stats Processor",
    "func": "// Process resource statistics\n\nconst { action } = msg.payload;\n\nif (action === 'stats') {\n    if (!global.resourceRegistry) {\n        const { ResourceRegistry } = require('./src/services/resource_registry');\n        global.resourceRegistry = new ResourceRegistry();\n    }\n    \n    const stats = global.resourceRegistry.getStats();\n    \n    msg.payload = {\n        action: 'stats',\n        stats,\n        timestamp: new Date().toISOString()\n    };\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 200,
    "wires": [["stats_dashboard"]]
  },
  {
    "id": "stats_dashboard",
    "type": "debug",
    "z": "resource_registry_tab",
    "name": "Stats Dashboard",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 200,
    "wires": []
  },
  {
    "id": "register_example_resource",
    "type": "inject",
    "z": "resource_registry_tab",
    "name": "Register Example Resource",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"action\": \"register\", \"name\": \"Company Strategy Document\", \"type\": \"document\", \"content\": \"Our autonomous digital company strategy focuses on AI-driven business processes and automated revenue generation.\", \"agentId\": \"strategy_planner\", \"accessLevel\": \"public\", \"tags\": [\"strategy\", \"business\", \"planning\"]}",
    "payloadType": "json",
    "x": 150,
    "y": 300,
    "wires": [["register_processor"]]
  },
  {
    "id": "register_processor",
    "type": "function",
    "z": "resource_registry_tab",
    "name": "Register Processor",
    "func": "// Process resource registration\n\nconst { action, ...resourceData } = msg.payload;\n\nif (action === 'register') {\n    if (!global.resourceRegistry) {\n        const { ResourceRegistry } = require('./src/services/resource_registry');\n        global.resourceRegistry = new ResourceRegistry();\n    }\n    \n    try {\n        const resource = await global.resourceRegistry.registerResource(resourceData);\n        \n        msg.payload = {\n            action: 'register',\n            success: true,\n            resource: resource,\n            message: `Resource ${resource.name} registered successfully`,\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        msg.payload = {\n            action: 'register',\n            success: false,\n            error: error.message,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 300,
    "wires": [["register_response"]]
  },
  {
    "id": "register_response",
    "type": "debug",
    "z": "resource_registry_tab",
    "name": "Register Response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 300,
    "wires": []
  },
  {
    "id": "search_resources",
    "type": "inject",
    "z": "resource_registry_tab",
    "name": "Search Resources",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"action\": \"search\", \"query\": \"strategy\", \"filters\": {\"type\": \"document\", \"accessLevel\": \"public\"}}",
    "payloadType": "json",
    "x": 150,
    "y": 400,
    "wires": [["search_processor"]]
  },
  {
    "id": "search_processor",
    "type": "function",
    "z": "resource_registry_tab",
    "name": "Search Processor",
    "func": "// Process resource search\n\nconst { action, query, filters } = msg.payload;\n\nif (action === 'search') {\n    if (!global.resourceRegistry) {\n        const { ResourceRegistry } = require('./src/services/resource_registry');\n        global.resourceRegistry = new ResourceRegistry();\n    }\n    \n    try {\n        const results = await global.resourceRegistry.searchResources(query, filters);\n        \n        msg.payload = {\n            action: 'search',\n            success: true,\n            results: results,\n            count: results.length,\n            query: query,\n            filters: filters,\n            timestamp: new Date().toISOString()\n        };\n    } catch (error) {\n        msg.payload = {\n            action: 'search',\n            success: false,\n            error: error.message,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 400,
    "wires": [["search_response"]]
  },
  {
    "id": "search_response",
    "type": "debug",
    "z": "resource_registry_tab",
    "name": "Search Response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 400,
    "wires": []
  },
  {
    "id": "resource_notification",
    "type": "function",
    "z": "resource_registry_tab",
    "name": "Resource Notification",
    "func": "// Handle resource registry events\n\nconst event = msg.payload;\n\nif (event.type === 'resourceRegistered') {\n    console.log(`üìÑ New resource registered: ${event.resource.name} by ${event.resource.agentId}`);\n    \n    // Notify relevant agents\n    msg.payload = {\n        type: 'resource_notification',\n        action: 'new_resource',\n        resource: event.resource,\n        message: `New resource available: ${event.resource.name}`,\n        timestamp: new Date().toISOString()\n    };\n}\nelse if (event.type === 'resourceUpdated') {\n    console.log(`üìù Resource updated: ${event.resource.name} (v${event.resource.version})`);\n    \n    msg.payload = {\n        type: 'resource_notification',\n        action: 'resource_updated',\n        resource: event.resource,\n        message: `Resource updated: ${event.resource.name}`,\n        timestamp: new Date().toISOString()\n    };\n}\nelse if (event.type === 'resourceShared') {\n    console.log(`üì§ Resource shared: ${event.resourceId} with ${event.targetAgentId}`);\n    \n    msg.payload = {\n        type: 'resource_notification',\n        action: 'resource_shared',\n        resourceId: event.resourceId,\n        targetAgentId: event.targetAgentId,\n        accessLevel: event.accessLevel,\n        message: `Resource shared with ${event.targetAgentId}`,\n        timestamp: new Date().toISOString()\n    };\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 500,
    "wires": [["notification_log"]]
  },
  {
    "id": "notification_log",
    "type": "debug",
    "z": "resource_registry_tab",
    "name": "Notification Log",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 500,
    "wires": []
  }
] 